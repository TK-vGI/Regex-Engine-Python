import sys
sys.setrecursionlimit(10000)

def output_result(result: bool) -> None:
    print(f"{result}")

def regexp_compare(char_regex: str, char_inpt: str) -> bool:
    # Wild card regex, empty regex should always return True
    if char_regex == "." or char_regex == "":
        return True
    # Empty input returns always False if regex is not empty
    if char_inpt == "":
        return False
    return char_regex == char_inpt

def match_strings(regex: str, inpt: str, strict: bool = False) -> bool:
    #  print(f"🧩 Matching: regex='{regex}' | input='{inpt}' | strict={strict}") # Debug

    # Base case: if regex is empty
    if regex == "":
        if strict and inpt != "":
            # print("❌ Strict mode: regex consumed but input remains") # Debug
            return False
        # print("✅ Regex consumed: match successful") # Debug
        return True

    # If input is empty
    if inpt == "":
        # Can continue if next regex char is a repetition operator
        if len(regex) > 1 and regex[1] in "?*":
            # print(f"🔁 Input empty — skipping '{regex[0]}{regex[1]}'") # Debug
            return match_strings(regex[2:], inpt, strict)
        # print("❌ Input consumed before regex") # Debug
        return False

    # Handle '?'
    if len(regex) > 1 and regex[1] == "?":
        # print(f"🔍 Found '?': checking '{regex[0]}' zero or one times") # Debug
        zero_case = match_strings(regex[2:], inpt, strict)
        one_case = regexp_compare(regex[0], inpt[0]) and match_strings(regex[2:], inpt[1:], strict)
        return zero_case or one_case

    # Handle '*'
    if len(regex) > 1 and regex[1] == "*":
        # print(f"🔍 Found '*': checking '{regex[0]}' zero or more times") # Debug
        zero_case = match_strings(regex[2:], inpt, strict)
        one_or_more = False
        if regexp_compare(regex[0], inpt[0]):
            one_or_more = match_strings(regex, inpt[1:], strict)
        return zero_case or one_or_more

    # Handle '+'
    if len(regex) > 1 and regex[1] == "+":
        # print(f"🔍 Found '+': checking '{regex[0]}' one or more times") # Debug
        if not regexp_compare(regex[0], inpt[0]):
            # print(f"❌ First occurrence of '{regex[0]}' failed") # Debug
            return False
        one_case = match_strings(regex[2:], inpt[1:], strict)
        more_case = match_strings(regex, inpt[1:], strict)
        return one_case or more_case

    # Regular character match
    if not regexp_compare(regex[0], inpt[0]):
        # print(f"❌ Character mismatch: '{regex[0]}' != '{inpt[0]}'") # Debug
        return False

    # print(f"✅ Character match: '{regex[0]}' == '{inpt[0]}'") # Debug
    return match_strings(regex[1:], inpt[1:], strict)

def advanced_match(regex: str, inpt: str) -> bool:
    # print(f"🔍 Starting match with regex='{regex}' and input='{inpt}'") # Debug
    if regex == "":
        # print("📭 Empty regex — always returns True") # Debug
        return True

    # Case: Anchored match both start and end (^ and $)
    if regex.startswith("^") and regex.endswith("$"):
        core = regex[1:-1]
        # return match_strings(core, inpt) if len(core) == len(inpt) else False # One-liner

        # print(f"📌 Anchored full match: matching entire input to '{core}'") # Debug
        result = match_strings(core, inpt, strict=True)
        # if not result:
            # print("❌ Input does not exactly match regex") # Debug
        return result

    # Case: Anchored match at start (^)
    elif regex.startswith("^") and not regex.endswith("$"):
        # return match_strings(regex[1:], inpt) # One-liner

        pattern = regex[1:]
        # print(f"📌 Anchored start: matching '{pattern}' at beginning of input") # Debug
        result = match_strings(pattern, inpt)
        # if not result:
            # print("❌ Failed match at start") # Debug
        return result

    # Case: Anchored match at end ($)
    elif regex.endswith("$") and not regex.startswith("^"):
        # return match_strings(regex[:-1], inpt[-len(regex[:-1]):]) if len(regex[:-1]) <= len(inpt) else False # One-liner

        pattern = regex[:-1]
        if len(pattern) > len(inpt):
            # print("❌ Pattern longer than input for end anchor") # Debug
            return False
        end_slice = inpt[-len(pattern):]
        # print(f"📌 Anchored end: matching '{pattern}' against end of input '{end_slice}'") # Debug
        result = match_strings(pattern, end_slice)
        # if not result:
            # print("❌ Failed match at end") # Debug
        return result

    # Case: general scanning (only if no repetition metacharacters)
    # Unanchored pattern: search for match anywhere in input
    # print(f"🔄 Unanchored pattern: scanning input for pattern '{regex}'") # Debug
    for i in range(len(inpt)):
        if match_strings(regex, inpt[i:]):
            return True
    return False

def main():
    try:
        user_regex, user_input = input().split("|")
        if user_regex in ["", None]:
            user_regex = ""
        if user_input in ["", None]:
            user_input = ""
    except ValueError:
        print("Invalid input")
        return

    result = advanced_match(user_regex, user_input)
    output_result(result)

if __name__ == "__main__":
    main()