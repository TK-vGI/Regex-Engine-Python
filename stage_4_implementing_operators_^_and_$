import sys
sys.setrecursionlimit(10000)

def output_result(result: bool) -> None:
    print(f"{result}")

def regexp_compare(char_regex: str, char_inpt: str) -> bool:
    # Wild card regex, empty regex should always return True
    if char_regex == "." or char_regex == "":
        return True
    # Empty input returns always False if regex is not empty
    if char_inpt == "":
        return False
    return char_regex == char_inpt

def match_strings(regex: str, inpt: str) -> bool:
    # Empty regex matches anything
    if regex == "":
        return True
    # Empty input returns False
    if inpt == "":
        return False
    # Check first character pair with Stage 1 logic
    if not regexp_compare(regex[0], inpt[0]):
        return False
    # Recurse over the rest
    return match_strings(regex[1:], inpt[1:])

def scan_match(regex: str, inpt: str) -> bool:
    regex_len = len(regex)
    input_len = len(inpt)

    # If regex is empty, it matches everything (per spec)
    if regex == "":
        return True

    # If regex is longer than input, no match is possible
    if regex_len > input_len:
        return False

    # Slide regex across input string
    for i in range(input_len - regex_len + 1):
        substring = inpt[i:i + regex_len]
        if match_strings(regex, substring):
            return True

    return False

def advance_match(regex: str, inpt: str) -> bool:
    # print(f"🔍 Starting match with regex='{regex}' and input='{inpt}'") # Debug

    # Case: ^anchor only
    if regex.startswith("^") and not regex.endswith("$"):
        # return match_strings(regex[1:], inpt) # One-liner
        pattern = regex[1:]
        # print(f"📌 Anchored match at start: comparing '{pattern}' with beginning of input") # Debug
        result = match_strings(pattern, inpt)
        # if not result:
        #     print("❌ Match failed at start of string") # Debug
        return result

    # Case: $anchor only
    elif regex.endswith("$") and not regex.startswith("^"):
        # return match_strings(regex[:-1], inpt[-len(regex[:-1]):]) if len(regex[:-1]) <= len(inpt) else False # One-liner

        pattern = regex[:-1]
        if len(pattern) > len(inpt):
            # print("❌ Match failed: pattern longer than input for end anchor") # Debug
            return False
        end_slice = inpt[-len(pattern):]
        # print(f"📌 Anchored match at end: comparing '{pattern}' with end of input '{end_slice}'") # Debug
        result = match_strings(pattern, end_slice)
        # if not result:
            # print("❌ Match failed at end of string") # Debug
        return result

    # Case: both ^ and $
    elif regex.startswith("^") and regex.endswith("$"):
        core = regex[1:-1]
        # return match_strings(core, inpt) if len(core) == len(inpt) else False # One-liner

        # print(f"📌 Exact match required: comparing '{core}' with entire input") # Debug
        if len(core) != len(inpt):
            # print("❌ Match failed: lengths differ") # Debug
            return False
        result = match_strings(core, inpt)
        # if not result:
        #     print("❌ Match failed: input does not exactly match regex") # Debug
        return result

    # Case: no anchors—scan the whole string
    else:
        # return scan_match(regex, inpt) # One-liner

        # print(f"🔄 Scanning input for pattern '{regex}'") # Debug
        result = scan_match(regex, inpt)
        # if not result:
        #     print("❌ Match failed: pattern not found in input") # Debug
        return result

def main():
    try:
        user_regex, user_input = input().split("|")
        if user_regex in ["", None]:
            user_regex = ""
        if user_input in ["", None]:
            user_input = ""
    except ValueError:
        print("Invalid input")
        return

    # print(f"Input: '{user_regex}|{user_input}'") # Debug

    result = advance_match(user_regex, user_input)
    output_result(result)

if __name__ == "__main__":
    main()
